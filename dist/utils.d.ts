export declare function has(target: object, key: string): boolean;
export declare function last<T>(iterable: Iterable<T>): T;
export declare function includes<T>(iterable: Iterable<T>, target: any): boolean;
export declare function tap<T>(fn: (v: T) => any): (val: T) => T;
export declare function existy(v: any): boolean;
export declare function bundle<A>(...fns: ((a: A) => any)[]): (a: A) => any;
export declare function bundle<A1, A2>(...fns: ((a1: A1, a2: A2) => any)[]): (a1: A1, a2: A2) => any;
export declare function bundle<A1, A2, A3>(...fns: ((a1: A1, a2: A2, a3: A3) => any)[]): (a1: A1, a2: A2, a3: A3) => any;
export declare function identity<T>(value: T): T;
export declare function noop(): void;
export declare function difference<T>(a1: T[], a2: T[]): T[];
export declare function intersection<T>(a1: T[], a2: T[]): T[];
export declare function groupBy<T, K extends keyof T>(arr: T[], key: K): {
    [k: string]: T;
};
export declare function constant<T>(v: T): (..._x: any[]) => T;
export declare function onlyThatTime(n: number, callback: () => any): () => void;
export declare function onlyThatTime<A>(n: number, callback: (a: A) => any, init?: [A]): (a: A) => void;
export declare function onlyThatTime<A1, A2>(n: number, callback: (a1: A1, a2: A2) => any, init?: [A1, A2]): (a1: A1, a2: A2) => void;
export declare function onlyThatTime<A1, A2, A3>(n: number, callback: (a1: A1, a2: A2, a3: A3) => any, init?: [A1, A2, A3]): (a1: A1, a2: A2, a3: A3) => void;
